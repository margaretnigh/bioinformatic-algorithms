def read_fasta_from_file(file_path):
    sequences = []
    current_sequence = ""
    
    with open(file_path, 'r') as fasta_file:
        for line in fasta_file:
            if line.startswith(">"):  # Skip headers
                if current_sequence:
                    sequences.append(current_sequence)
                    current_sequence = ""
            else:
                current_sequence += line.strip()
        
        # Append the last sequence
        if current_sequence:
            sequences.append(current_sequence)
    
    return sequences

def print_table(seq1, seq2, table):
    spaced_seq2 = "  ".join(seq2)
    print("      " + spaced_seq2)
    i = 0
    for row in table:
        if i == 0:
            print(" ",row)
            i += 1
        else:
            print(seq1[i-1], row)
            i += 1

file_path = "LAB6/rosalind_loca.txt"
sequences = read_fasta_from_file(file_path)

s = sequences[0]
t = sequences[1]

def localAlign(X, Y, PAM250, gap_penalty):
    # initialize matrix
    rows, cols = len(X)+1, len(Y)+1
    M = [[0] * cols for _ in range(rows)]

    max_score = 0
    # follow bellman equation to fill in the rest of the matrix
    for i in range(1, rows):
        for j in range(1, cols):
            try:
                score = PAM250[(X[i-1], Y[j-1])]
            except KeyError:
                score = PAM250[(Y[j-1], X[i-1])]
            match = M[i-1][j-1] + score
            delete = M[i-1][j] + gap_penalty
            insert = M[i][j-1] + gap_penalty
            M[i][j] = max(0, match, delete, insert)
            if M[i][j] > max_score:
                max_score = M[i][j]
                max_score_location = (i,j)
    alignX, alignY = backtracking(M, X, Y, max_score_location)
    newX = alignX[::-1]
    newY = alignY[::-1]
    with open("LAB6/output2.txt", "w") as file:
        file.write(str(max_score) + "\n")
        file.write(str(newX) + "\n")
        file.write(str(newY))

def backtracking(M, X, Y, max_score_location):
    alignX = ""
    alignY = ""
    i, j = max_score_location

    while M[i][j] != 0:
        if X[i-1] == Y[j-1]:
            alignX += X[i-1]
            alignY += Y[j-1]
            i -= 1
            j -= 1
        else:
            score_diagonal = M[i-1][j-1]
            score_up = M[i-1][j]
            score_left = M[i][j-1]

            # Find the maximum score among the neighbors
            max_score = max(score_diagonal, score_up, score_left)

            # Determine the direction based on the maximum score
            if max_score == score_diagonal:
                alignX += X[i-1]
                alignY += Y[j-1]
                i -= 1
                j -= 1
            elif max_score == score_up:
                alignX += X[i-1]
                alignY += ""
                i -= 1
            elif max_score == score_left:
                alignX += ""
                alignY += Y[j-1]
                j -= 1

    return alignX, alignY



PAM250 = {
    ('A', 'A'):  2, ('A', 'R'): -2, ('A', 'N'):  0, ('A', 'D'):  0, ('A', 'C'): -2, ('A', 'Q'):  0, ('A', 'E'):  0, ('A', 'G'):  1, ('A', 'H'): -1, ('A', 'I'): -1, ('A', 'L'): -2, ('A', 'K'): -1, ('A', 'M'): -1, ('A', 'F'): -3, ('A', 'P'):  1, ('A', 'S'):  1, ('A', 'T'):  1, ('A', 'W'): -6, ('A', 'Y'): -3, ('A', 'V'):  0,
    ('R', 'A'): -2, ('R', 'R'):  6, ('R', 'N'):  0, ('R', 'D'): -1, ('R', 'C'): -4, ('R', 'Q'):  1, ('R', 'E'): -1, ('R', 'G'): -3, ('R', 'H'):  2, ('R', 'I'): -2, ('R', 'L'): -3, ('R', 'K'):  3, ('R', 'M'):  0, ('R', 'F'): -4, ('R', 'P'):  0, ('R', 'S'):  0, ('R', 'T'): -1, ('R', 'W'):  2, ('R', 'Y'): -4, ('R', 'V'): -2,
    ('N', 'A'):  0, ('N', 'R'):  0, ('N', 'N'):  2, ('N', 'D'):  2, ('N', 'C'): -4, ('N', 'Q'):  1, ('N', 'E'):  1, ('N', 'G'):  0, ('N', 'H'):  2, ('N', 'I'): -2, ('N', 'L'): -3, ('N', 'K'):  1, ('N', 'M'): -2, ('N', 'F'): -3, ('N', 'P'):  0, ('N', 'S'):  1, ('N', 'T'):  0, ('N', 'W'): -4, ('N', 'Y'): -2, ('N', 'V'): -2,
    ('D', 'A'):  0, ('D', 'R'): -1, ('D', 'N'):  2, ('D', 'D'):  4, ('D', 'C'): -5, ('D', 'Q'):  2, ('D', 'E'):  3, ('D', 'G'):  1, ('D', 'H'):  1, ('D', 'I'): -2, ('D', 'L'): -4, ('D', 'K'):  0, ('D', 'M'): -3, ('D', 'F'): -6, ('D', 'P'): -1, ('D', 'S'):  0, ('D', 'T'):  0, ('D', 'W'): -7, ('D', 'Y'): -4, ('D', 'V'): -2,
    ('C', 'A'): -2, ('C', 'R'): -4, ('C', 'N'): -4, ('C', 'D'): -5, ('C', 'C'): 12, ('C', 'Q'): -5, ('C', 'E'): -5, ('C', 'G'): -3, ('C', 'H'): -3, ('C', 'I'): -2, ('C', 'L'): -6, ('C', 'K'): -5, ('C', 'M'): -5, ('C', 'F'): -4, ('C', 'P'): -3, ('C', 'S'):  0, ('C', 'T'): -2, ('C', 'W'): -8, ('C', 'Y'):  0, ('C', 'V'): -2,
    ('Q', 'A'):  0, ('Q', 'R'):  1, ('Q', 'N'):  1, ('Q', 'D'):  2, ('Q', 'C'): -5, ('Q', 'Q'):  4, ('Q', 'E'):  2, ('Q', 'G'): -1, ('Q', 'H'):  3, ('Q', 'I'): -2, ('Q', 'L'): -2, ('Q', 'K'):  1, ('Q', 'M'):  0, ('Q', 'F'): -5, ('Q', 'P'):  0, ('Q', 'S'):  0, ('Q', 'T'): -1, ('Q', 'W'): -5, ('Q', 'Y'): -4, ('Q', 'V'): -2,
    ('E', 'A'):  0, ('E', 'R'): -1, ('E', 'N'):  1, ('E', 'D'):  3, ('E', 'C'): -5, ('E', 'Q'):  2, ('E', 'E'):  4, ('E', 'G'):  0, ('E', 'H'):  1, ('E', 'I'): -2, ('E', 'L'): -3, ('E', 'K'):  0, ('E', 'M'): -2, ('E', 'F'): -5, ('E', 'P'): -1, ('E', 'S'):  0, ('E', 'T'): -1, ('E', 'W'): -7, ('E', 'Y'): -4, ('E', 'V'): -2,
    ('G', 'A'):  1, ('G', 'R'): -3, ('G', 'N'):  0, ('G', 'D'):  1, ('G', 'C'): -3, ('G', 'Q'): -1, ('G', 'E'):  0, ('G', 'G'):  5, ('G', 'H'): -2, ('G', 'I'): -3, ('G', 'L'): -4, ('G', 'K'): -2, ('G', 'M'): -3, ('G', 'F'): -5, ('G', 'P'):  0, ('G', 'S'):  1, ('G', 'T'):  0, ('G', 'W'): -7, ('G', 'Y'): -5, ('G', 'V'): -1,
    ('H', 'A'): -1, ('H', 'R'):  2, ('H', 'N'):  2, ('H', 'D'):  1, ('H', 'C'): -3, ('H', 'Q'):  3, ('H', 'E'):  1, ('H', 'G'): -2, ('H', 'H'):  6, ('H', 'I'): -2, ('H', 'L'): -2, ('H', 'K'):  0, ('H', 'M'): -2, ('H', 'F'): -2, ('H', 'P'):  0, ('H', 'S'): -1, ('H', 'T'): -1, ('H', 'W'): -3, ('H', 'Y'):  0, ('H', 'V'): -2,
    ('I', 'A'): -1, ('I', 'R'): -2, ('I', 'N'): -2, ('I', 'D'): -2, ('I', 'C'): -2, ('I', 'Q'): -2, ('I', 'E'): -2, ('I', 'G'): -3, ('I', 'H'): -2, ('I', 'I'):  5, ('I', 'L'):  2, ('I', 'K'): -2, ('I', 'M'):  2, ('I', 'F'):  1, ('I', 'P'): -2, ('I', 'S'): -1, ('I', 'T'):  1, ('I', 'W'): -5, ('I', 'Y'): -1, ('I', 'V'):  4,
    ('L', 'A'): -2, ('L', 'R'): -3, ('L', 'N'): -3, ('L', 'D'): -4, ('L', 'C'): -6, ('L', 'Q'): -2, ('L', 'E'): -3, ('L', 'G'): -4, ('L', 'H'): -2, ('L', 'I'):  2, ('L', 'L'):  6, ('L', 'K'): -3, ('L', 'M'):  4, ('L', 'F'):  2, ('L', 'P'): -3, ('L', 'S'): -3, ('L', 'T'): -2, ('L', 'W'): -2, ('L', 'Y'): -1, ('L', 'V'):  2,
    ('K', 'A'): -1, ('K', 'R'):  3, ('K', 'N'):  1, ('K', 'D'):  0, ('K', 'C'): -5, ('K', 'Q'):  1, ('K', 'E'):  0, ('K', 'G'): -2, ('K', 'H'):  0, ('K', 'I'): -2, ('K', 'L'): -3, ('K', 'K'):  5, ('K', 'M'):  0, ('K', 'F'): -5, ('K', 'P'): -1, ('K', 'S'):  0, ('K', 'T'):  0, ('K', 'W'): -3, ('K', 'Y'): -4, ('K', 'V'): -2,
    ('M', 'A'): -1, ('M', 'R'):  0, ('M', 'N'): -2, ('M', 'D'): -3, ('M', 'C'): -5, ('M', 'Q'):  0, ('M', 'E'): -2, ('M', 'G'): -3, ('M', 'H'): -2, ('M', 'I'):  2, ('M', 'L'):  4, ('M', 'K'):  0, ('M', 'M'):  6, ('M', 'F'):  0, ('M', 'P'): -2, ('M', 'S'): -2, ('M', 'T'): -1, ('M', 'W'): -4, ('M', 'Y'): -2, ('M', 'V'):  2,
    ('F', 'A'): -3, ('F', 'R'): -4, ('F', 'N'): -3, ('F', 'D'): -6, ('F', 'C'): -4, ('F', 'Q'): -5, ('F', 'E'): -5, ('F', 'G'): -5, ('F', 'H'): -2, ('F', 'I'):  1, ('F', 'L'):  2, ('F', 'K'): -5, ('F', 'M'):  0, ('F', 'F'):  9, ('F', 'P'): -5, ('F', 'S'): -3, ('F', 'T'): -3, ('F', 'W'):  0, ('F', 'Y'):  7, ('F', 'V'): -1,
    ('P', 'A'):  1, ('P', 'R'):  0, ('P', 'N'):  0, ('P', 'D'): -1, ('P', 'C'): -3, ('P', 'Q'):  0, ('P', 'E'): -1, ('P', 'G'):  0, ('P', 'H'):  0, ('P', 'I'): -2, ('P', 'L'): -3, ('P', 'K'): -1, ('P', 'M'): -2, ('P', 'F'): -5, ('P', 'P'):  6, ('P', 'S'):  1, ('P', 'T'):  0, ('P', 'W'): -6, ('P', 'Y'): -5, ('P', 'V'): -1,
    ('S', 'A'):  1, ('S', 'R'):  0, ('S', 'N'):  1, ('S', 'D'):  0, ('S', 'C'):  0, ('S', 'Q'):  0, ('S', 'E'):  0, ('S', 'G'):  1, ('S', 'H'): -1, ('S', 'I'): -1, ('S', 'L'): -3, ('S', 'K'):  0, ('S', 'M'): -2, ('S', 'F'): -3, ('S', 'P'):  1, ('S', 'S'):  2, ('S', 'T'):  1, ('S', 'W'): -2, ('S', 'Y'): -3, ('S', 'V'): -1,
    ('T', 'A'):  1, ('T', 'R'): -1, ('T', 'N'):  0, ('T', 'D'):  0, ('T', 'C'): -2, ('T', 'Q'): -1, ('T', 'E'): -1, ('T', 'G'):  0, ('T', 'H'): -1, ('T', 'I'):  1, ('T', 'L'): -2, ('T', 'K'):  0, ('T', 'M'): -1, ('T', 'F'): -3, ('T', 'P'):  0, ('T', 'S'):  1, ('T', 'T'):  3, ('T', 'W'): -5, ('T', 'Y'): -3, ('T', 'V'):  0,
    ('W', 'A'): -6, ('W', 'R'):  2, ('W', 'N'): -4, ('W', 'D'): -7, ('W', 'C'): -8, ('W', 'Q'): -5, ('W', 'E'): -7, ('W', 'G'): -7, ('W', 'H'): -3, ('W', 'I'): -5, ('W', 'L'): -2, ('W', 'K'): -3, ('W', 'M'): -4, ('W', 'F'):  0, ('W', 'P'): -6, ('W', 'S'): -2, ('W', 'T'): -5, ('W', 'W'): 17, ('W', 'Y'):  0, ('W', 'V'): -6,
    ('Y', 'A'): -3, ('Y', 'R'): -4, ('Y', 'N'): -2, ('Y', 'D'): -4, ('Y', 'C'):  0, ('Y', 'Q'): -4, ('Y', 'E'): -4, ('Y', 'G'): -5, ('Y', 'H'):  0, ('Y', 'I'): -1, ('Y', 'L'): -1, ('Y', 'K'): -4, ('Y', 'M'): -2, ('Y', 'F'):  7, ('Y', 'P'): -5, ('Y', 'S'): -3, ('Y', 'T'): -3, ('Y', 'W'):  0, ('Y', 'Y'): 10, ('Y', 'V'): -2,
    ('V', 'A'):  0, ('V', 'R'): -2, ('V', 'N'): -2, ('V', 'D'): -2, ('V', 'C'): -2, ('V', 'Q'): -2, ('V', 'E'): -2, ('V', 'G'): -1, ('V', 'H'): -2, ('V', 'I'):  4, ('V', 'L'):  2, ('V', 'K'): -2, ('V', 'M'):  2, ('V', 'F'): -1, ('V', 'P'): -1, ('V', 'S'): -1, ('V', 'T'):  0, ('V', 'W'): -6, ('V', 'Y'): -2, ('V', 'V'):  4
}

gap_penalty = -5
result = localAlign(s, t, PAM250, gap_penalty)